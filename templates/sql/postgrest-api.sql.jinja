/*

Code generated.
{{today}}

postgrest api crud functions for table {{table}}

{{table_meta.description}}

*/


GRANT ALL ON TABLE public.{{table}} TO web_user;
{%-for keyC in keys if keyC.table_type=="serial"%}
GRANT USAGE, SELECT ON SEQUENCE public.{{table}}_{{keyC.name}}_seq TO web_user;
{%-endfor%}


DROP FUNCTION IF EXISTS api.{{table}}_list(int);
DROP FUNCTION IF EXISTS api.{{table}}_get({{list_fmt(keys,"{.dbtype}")|join(',')}});
DROP FUNCTION IF EXISTS api.{{table}}_page_count();
DROP FUNCTION IF EXISTS api.{{table}}_update({{list_fmt(fields,"{.dbtype}")|join(',')}});
DROP FUNCTION IF EXISTS api.{{table}}_create({{list_fmt(fields,"{.dbtype}")|join(',')}});
DROP FUNCTION IF EXISTS api.{{table}}_delete({{list_fmt(keys,"{.dbtype}")|join(',')}});


/* {{table}}_list

List {{table}}s

select * from api.{{table}}_list(0)

*/
CREATE FUNCTION api.{{table}}_list(IN page int)
RETURNS TABLE
    ( {{ list_fmt(fields, "{0.name} {0.dbtype}")|join('\n    , ') }}
    )
AS $$

  SELECT {{ list_fmt(fields, "{0.name}")|join('\n    , ') }}
  FROM public.{{table}}
  OFFSET ({{table}}_list.page * api.const_page_size()) LIMIT api.const_page_size();

$$ LANGUAGE SQL STABLE;
COMMENT ON FUNCTION api.{{table}}_list(int) IS
'Return a list {{table}}s by page.';
GRANT EXECUTE ON FUNCTION api.{{table}}_list(int) TO web_user;


/* {{table}}_page_count

Count the number of pages that {{table}}_list will return.

select * from api.{{table}}_page_count()

*/
CREATE FUNCTION api.{{table}}_page_count()
RETURNS int
AS $$

  SELECT ceil(count(*)::decimal / api.const_page_size())::int AS result FROM public.{{table}};

$$ LANGUAGE SQL STABLE;
COMMENT ON FUNCTION api.{{table}}_page_count() IS
'Count the number of pages that will be returned by {{table}}_list';
GRANT EXECUTE ON FUNCTION api.{{table}}_page_count() TO web_user;


/* {{table}}_get

List {{table}}s

select * from api.{{table}}_get(0)

*/
CREATE FUNCTION api.{{table}}_get({{list_fmt(keys,"IN {0.name} {0.dbtype}")|join(', ')}})
RETURNS TABLE
  ( {{ list_fmt(fields, "{0.name} {0.dbtype}")|join('\n  , ') }}
  )
AS $$

  SELECT {{ list_fmt(fields, "{0.name}")|join(',\n    ') }}
  FROM public.{{table}}
  WHERE {{list_fmt(keys,"{0.name} = {0.table}_get.{0.name}")|join('\n AND ')}};

$$ LANGUAGE SQL STABLE;
COMMENT ON FUNCTION api.{{table}}_get({{list_fmt(keys,"{.dbtype}")|join(',')}}) IS
'Return a single {{table}} detail';
GRANT EXECUTE ON FUNCTION api.{{table}}_get({{list_fmt(keys,"{.dbtype}")|join(',')}}) TO web_user;



{%- if no_keys|length > 0 %}
/* {{table}}_update

update a {{table}}

*/
CREATE FUNCTION api.{{table}}_update
  ( {{ list_fmt(fields, "{0.name}_arg {0.dbtype}")|join('\n  , ') }}
  ) RETURNS TABLE
  ( {{ list_fmt(fields, "{0.name} {0.dbtype}")|join('\n  , ') }}
  ) 
AS $BODY$

  UPDATE public.{{table}} SET {{ list_fmt(no_keys, "{0.name} = {0.table}_update.{0.name}_arg")|join(',\n    ') }}
  WHERE {{list_fmt(keys,"{0.name} = {0.table}_update.{0.name}_arg")|join('\n    AND ')}}
  RETURNING {{ list_fmt(fields, "{0.name}")|join('\n  , ') }};

$BODY$ LANGUAGE SQL;
COMMENT ON FUNCTION api.{{table}}_update({{list_fmt(fields,"{.dbtype}")|join(',')}}) IS
'update a {{table}}';
GRANT EXECUTE ON FUNCTION api.{{table}}_update({{list_fmt(fields,"{.dbtype}")|join(',')}}) TO web_user;

{%-endif%}


/* {{table}}_create

create a new {{table}} record.

*/
CREATE FUNCTION api.{{table}}_create
{%-for field in fields %}
  {{"(" if loop.first else ","}} {{field.name}}_arg {{field.dbtype}}
{%-endfor%}
  ) RETURNS TABLE
  ( {{ list_fmt(fields, "{0.name} {0.dbtype}")|join('\n  , ') }}
  )
AS $BODY$

  INSERT INTO public.{{table}}
{%-for field in fields %}
  {{"(" if loop.first else ","}} {{field.name}} 
{%-endfor%}
  )
  VALUES
{%-for field in fields %}
  {{"(" if loop.first else ","}} {%if field.table_type != "serial"%}{{field.table}}_create.{{field.name}}_arg{%else%}default{%endif%}
{%-endfor%}
  )
  RETURNING {{ list_fmt(fields, "{0.name}")|join('\n  , ') }};

$BODY$ LANGUAGE SQL;
COMMENT ON FUNCTION api.{{table}}_create({{list_fmt(fields,"{.dbtype}")|join(',')}}) IS
'create a new {{table}} record.';
GRANT EXECUTE ON FUNCTION api.{{table}}_create({{list_fmt(fields,"{.dbtype}")|join(',')}}) TO web_user;



/* {{table}}_delete

List {{table}}s

select api.{{table}}_delete(0)

*/
CREATE FUNCTION api.{{table}}_delete({{list_fmt(keys,"IN {0.name} {0.dbtype}")|join(',')}})
RETURNS void AS $$

  DELETE FROM public.{{table}}
  WHERE {{list_fmt(keys,"{0.name} = {0.table}_delete.{0.name}")|join('\n    AND ')}};

$$ LANGUAGE SQL;
COMMENT ON FUNCTION api.{{table}}_delete({{list_fmt(keys,"{.dbtype}")|join(',')}}) IS
'Delete a {{table}}';
GRANT EXECUTE ON FUNCTION api.{{table}}_delete({{list_fmt(keys,"{.dbtype}")|join(',')}}) TO web_user;
